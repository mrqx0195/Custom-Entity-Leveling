plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev' version '2.0.103'
    id 'idea'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories {
    maven { url 'https://maven.blamejared.com' }
}

base {
    archivesName = "${mod_file_name}-${minecraft_version}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    version = project.neo_version

    accessTransformers {
        file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    runs {
        client {
            client()
            gameDirectory = project.file('run/client')
            programArguments = [
                    "--username", "mrqx0195"
            ]
            systemProperty 'neoforge.enabledGameTestNamespaces', "${mod_id}"
        }

        server {
            server()
            gameDirectory = project.file('run/server')
            // programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', "${mod_id}"
        }

        gameTestServer {
            type = "gameTestServer"
            gameDirectory = project.file('run/gameTestServer')
            systemProperty 'neoforge.enabledGameTestNamespaces', "${mod_id}"
        }

        data {
            data()
            gameDirectory = project.file('run/data')
            programArguments.addAll '--mod', "${mod_id}", '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

sourceSets.main {
    resources {
        srcDir 'src/generated/resources'
    }
}

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    implementation group: 'net.darkhax.pricklemc', name: 'prickle-neoforge-1.21.1', version: prickle_version
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description,
            prickle_version        : prickle_version,
            prickle_version_range  : prickle_version_range,
            mod_file_name          : mod_file_name
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}
sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
